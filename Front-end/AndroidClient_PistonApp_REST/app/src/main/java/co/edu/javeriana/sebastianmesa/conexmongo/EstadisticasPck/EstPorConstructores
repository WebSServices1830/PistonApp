package co.edu.javeriana.sebastianmesa.conexmongo.EstadisticasPck;

import android.content.Intent;
import android.graphics.Color;
import android.os.AsyncTask;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.Gravity;
import android.widget.HorizontalScrollView;
import android.widget.ScrollView;
import android.widget.TableLayout;
import android.widget.TableRow;
import android.widget.TextView;
import android.widget.Toast;

import com.android.volley.AuthFailureError;
import com.android.volley.NetworkResponse;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.ServerError;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.HttpHeaderParser;
import com.android.volley.toolbox.JsonArrayRequest;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonObject;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;

import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import co.edu.javeriana.sebastianmesa.conexmongo.AdminMainActivity;
import co.edu.javeriana.sebastianmesa.conexmongo.Login.LoginActivityView;
import co.edu.javeriana.sebastianmesa.conexmongo.Managers.ManagerUsuario;
import co.edu.javeriana.sebastianmesa.conexmongo.ObjetosNegocio.GranPremio;
import co.edu.javeriana.sebastianmesa.conexmongo.ObjetosNegocio.Escuderia;
import co.edu.javeriana.sebastianmesa.conexmongo.ObjetosNegocio.Usuario;
import co.edu.javeriana.sebastianmesa.conexmongo.R;
import co.edu.javeriana.sebastianmesa.conexmongo.UserMenuActivity;
import de.codecrafters.tableview.TableView;
import de.codecrafters.tableview.listeners.TableDataClickListener;
import de.codecrafters.tableview.model.TableColumnPxWidthModel;
import de.codecrafters.tableview.toolkit.SimpleTableDataAdapter;
import de.codecrafters.tableview.toolkit.SimpleTableHeaderAdapter;

public class EstPorConstructores extends AppCompatActivity {

    private String[][] datos = { };

    static String[] encabezado={"#","Nombre","Campeonatos","veces Podio","Lugar Base","Jefe Tecnico","Jefe Equipo","Chasis"};
   // private ObtenerDatos wm_validarLogin = null;
    private List<Escuderia> listaEscuderias = new ArrayList<>();
    public TableView<String[]> tableView;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_est_por_Escuderia);


        tableView = (TableView<String[]>) findViewById(R.id.tableView);
        tableView.setHeaderAdapter(new SimpleTableHeaderAdapter(this,encabezado));


        tableView.setHeaderBackgroundColor(Color.parseColor("#2ecc71"));
        tableView.setColumnCount(4);

        tableView.addDataClickListener(new TableDataClickListener() {
            @Override
            public void onDataClicked(int rowIndex, Object clickedData) {
                Toast.makeText(EstPorConstructores.this, ((String[])clickedData)[1], Toast.LENGTH_SHORT).show();
            }
        });


        obtenerDatos();



    }


    public void obtenerDatos (){

        RequestQueue mRequestQueue;
        String url = "http://10.0.2.2:8080/myapp/PistonApp/escuderias";

        //RequestQueue initialized
        mRequestQueue = Volley.newRequestQueue(this);

        //String Request initialized
        JsonArrayRequest jsonArrayRequest = new JsonArrayRequest(Request.Method.GET, url, null, new Response.Listener<JSONArray>() {
            @Override
            public void onResponse(JSONArray response) {

                try {

                    for (int l = 0; l < response.length(); l++) {

                        JSONObject escuderia = response.getJSONObject(l);


                        String id_str = escuderia.getString("id_str");
                        String nombreEscuderia = escuderia.getString("nombre");
                        int campeonatosTotales = escuderia.getInt("cant_TitulosCampeonato");
                        int cant_podiosTotales = escuderia.getInt("cant_vecesEnPodio");
                        String lugarBaseEquipo = escuderia.getString("lugarBase");
                        String fotoEquipo_ref = escuderia.getString("fotoEscudo_ref");
                        String JFTecnico = escuderia.getString("jefeTecnico");
                        String JFEquipo = escuderia.getString("jefeEquipo");
                        String chasisAuto = escuderia.getString("chasis");




                        Escuderia escuderiaObjeto= new Escuderia();

                        escuderiaObjeto.setId_str(id_str);
                        escuderiaObjeto.setNombre(nombreEscuderia);
                        escuderiaObjeto.setCant_TitulosCampeonato(campeonatosTotales);
                        escuderiaObjeto.setCant_vecesEnPodio(cant_podiosTotales);
                        escuderiaObjeto.setFotoEscudo_ref(fotoEquipo_ref);
                        escuderiaObjeto.setLugarBase(lugarBaseEquipo);
                        escuderiaObjeto.setJefeTecnico(JFTecnico);
                        escuderiaObjeto.setJefeEquipo(JFEquipo);
                        escuderiaObjeto.setChasis(chasisAuto);

                        listaEscuderias.add(escuderiaObjeto);

                        String[][] datos = new String[listaEscuderias.size()][7];

                        for (int i = 0 ; i < listaEscuderias.size() ; i++){
                            for (int j = 0 ; j < 7 ; j++){
                                switch (j) {
                                    case 0:
                                        datos[i][j] = Integer.toString(i+1);
                                        break;
                                    case 1:
                                        datos[i][j] = listaEscuderias.get(i).getNombre();
                                        break;
                                    case 2:
                                        datos[i][j] = Integer.toString(listaEscuderias.get(i).getCant_TitulosCampeonato());
                                        break;
                                    case 3:
//
                                        datos[i][j] = Integer.toString(listaEscuderias.get(i).getCant_vecesEnPodio());
                                        break;
                                    case 4:
                                        datos[i][j] = listaEscuderias.get(i).getLugarBase();
                                        break;
                                    case 5:
                                        datos[i][j] = listaEscuderias.get(i).getJefeTecnico();
                                        break;
                                    case 6:
                                        datos[i][j] = listaEscuderias.get(i).getJefeEquipo();
                                        break;
                                    case 7:
                                        datos[i][j] = listaEscuderias.get(i).getChasis();
                                        break;
                                }
                            }
                        }
                        Arrays.sort(datos, new Comparator() {
                            public int compare(Object o1, Object o2) {
                                String[] elt1 = (String[])o2;
                                String[] elt2 = (String[])o1;
                                return elt1[3].compareTo(elt2[3]);
                            }
                        });

                        tableView.setDataAdapter(new SimpleTableDataAdapter(getBaseContext(), datos));
                        Toast.makeText(getBaseContext(),"Bien. Tam: " + listaEscuderias.size(), Toast.LENGTH_SHORT).show();

                        Log.i("ViendoEscuderias",nombreEscuderia + " con " + campeonatosTotales +"Campeonatos");

                    }

//                    String nombreJSON = response.get("nombreUsuario").toString();
//                    String passJSON   = response.get("contra").toString();
//
//                    Boolean adminJSON  = Boolean.parseBoolean(response.get("admin").toString());

                    //Log.i(TAG,"Es admin:" + adminJSON.toString() );

                } catch (JSONException e) {
                    e.printStackTrace();
                    //Log.i(TAG,"Error pero con respuesta",e);
                }

            }
        }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {

                //Log.i(TAG,"Error :" + error.toString());
            }
        });

        mRequestQueue.add(jsonArrayRequest);
    }

/*

    private class ObtenerDatos extends AsyncTask<Void, Piloto, Boolean> {


        RequestQueue mRequestQueue;
        String url = "http://10.0.2.2:8080/myapp/PistonApp/pilotos";

        @Override
        protected Boolean doInBackground(Void... params) {
            // TODO: attempt authentication against a network service.
            //WebService - Opciones
            final String NAMESPACE = "http://webservice.javeriana.co/";
            final String URL="http://10.0.2.2:8080/WS/infoCampeonato?wsdl";
            final String METHOD_NAME = "verTodosLosPilotos";
            final String SOAP_ACTION = "http://webservice.javeriana.co/verTodosLosPilotos";

            SoapObject request = new SoapObject(NAMESPACE, METHOD_NAME);

            //request.addProperty("textoBusquedaNombre","Lewis");

            SoapSerializationEnvelope envelope =  new SoapSerializationEnvelope(SoapEnvelope.VER11);
            envelope.setOutputSoapObject(request);

            HttpTransportSE ht = new HttpTransportSE(URL);
            try {
                ht.call(SOAP_ACTION, envelope);

                KvmSerializable ks = (KvmSerializable)envelope.bodyIn;


                for(int i = 0; i < ks.getPropertyCount(); ++i){

                    SoapObject piloto = (SoapObject) ks.getProperty(i);

                    String id_str = piloto.getPrimitivePropertyAsString("id_str");
                    String nombreCompleto = piloto.getPrimitivePropertyAsString("nombreCompleto");
                    Date fecha_Nacimiento = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").parse(piloto.getPrimitivePropertyAsString("fecha_Nacimiento"));
                    String lugarNacimiento = piloto.getPrimitivePropertyAsString("lugarNacimiento");;
                    String foto_ref = piloto.getPrimitivePropertyAsString("foto_ref");;
                    int cant_podiosTotales = 0;
                    int cant_puntosTotales = 0;
                    int cant_granPremiosIngresado = 0;
                    float calificacion = 10;

                    Piloto pilotoObjeto= new Piloto();
                    pilotoObjeto.setId_str(id_str);
                    pilotoObjeto.setNombreCompleto(nombreCompleto);
                    pilotoObjeto.setFecha_Nacimiento(fecha_Nacimiento);
                    pilotoObjeto.setLugarNacimiento(lugarNacimiento);
                    pilotoObjeto.setFoto_ref(foto_ref);
                    pilotoObjeto.setCant_podiosTotales(cant_podiosTotales);
                    pilotoObjeto.setCant_puntosTotales(cant_puntosTotales);
                    pilotoObjeto.setCant_granPremiosIngresado(cant_granPremiosIngresado);
                    pilotoObjeto.setCalificacion(calificacion);

                    listaPilotos.add(pilotoObjeto);

                    publishProgress();

                }
                return true;
            }
            catch (Exception e)
            {
                Log.i("Error: ",e.getMessage());
                e.printStackTrace();

            }

            return false;
        }


        @Override
        protected void onPostExecute(final Boolean success) {
            if(success==false){
                Toast.makeText(getBaseContext(),"Error", Toast.LENGTH_SHORT).show();
            }
            else{

                String[][] datos = new String[listaPilotos.size()][4];

                for (int i = 0 ; i < listaPilotos.size() ; i++){
                    for (int j = 0 ; j < 4 ; j++){
                        switch (j) {
                            case 0:
                                datos[i][j] = Integer.toString(i+1);
                                break;
                            case 1:
                                datos[i][j] = listaPilotos.get(i).getNombreCompleto();
                                break;
                            case 2:
                                datos[i][j] = "equipo";
                                break;
                            case 3:
                                Random rand = new Random();
                                int  n = rand.nextInt(199) + 101;
                                datos[i][j] = Integer.toString(n);
                                break;

                        }
                    }

                }

                Arrays.sort(datos, new Comparator() {
                    public int compare(Object o1, Object o2) {
                        String[] elt1 = (String[])o2;
                        String[] elt2 = (String[])o1;
                        return elt1[3].compareTo(elt2[3]);
                    }
                });

                tableView.setDataAdapter(new SimpleTableDataAdapter(getBaseContext(), datos));
                Toast.makeText(getBaseContext(),"Bien. Tam: " + listaPilotos.size(), Toast.LENGTH_SHORT).show();

            }
        }

        @Override
        protected void onCancelled() {
            startActivity(new Intent(getBaseContext(), AdminMainActivity.class));
            Toast.makeText(getBaseContext(),"Error", Toast.LENGTH_LONG).show();
        }

    }

*/
}
